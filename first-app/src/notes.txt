ctrl+c остановить npm
props(свойства) - входные данные из входны(неизменяемый объект только для чтения)
state(состояние) - создаются в компоненте и полностью зависит от компонента
//!rcc классовые компоненты
//! rfc функциональный компонент
//!rafc- функциональный компонент стрелочной функции

//TODO - state
значение в state можно изменять

//!rcons- конструктор

//!this.handleChange=this.handleChange.bind(this);//привязать метод по умолчанию

//TODO - формы

формы удобно обрабатывать с помощью js функций у которых есть доступ к введенным данным
Называется это- управляемыми компонентами
в react состояние обычно содержится в свойстве компонентов state и обновляется только при вызове setstate
Сделано чтобы react компонент мог рендерить форму и контролировать ее поведение на пользовательский ввод


 event.preventDefault() - обработчик отправки, без перезагрузки страницы
 map - выводит массив

items: [...this.state.items, this.state.input]//спред оператор es6, добавляет значение состояния input в массив items
this.setState({
    hrefs:[...this.state.hrefs,{href:this.state.href,text:this.state.text}]

//!Уроки React Js - CSS стилизация. Как подключить библиотеку Material Ui, Bootstrap
https://material-ui.com/ru/getting-started/installation/ 
для подключения стилей
https://www.youtube.com/watch?v=lQTJsP8o6S0&list=PLVfMKQXDAhGV90yI1FzsciwEi-11ILfAG&index=5 урок 6, обучение работы с material UI
подключаем файлы и api в конце файла material ui


//TODO жизненный цикл компонента
//!инициализация - фаза на которой компонент начинает свой путь(конструктор)
//!монтаж - фаза на которой на которой компонент монтируется в DOM, здесь появляются доступные методы
//!обновления - место, где состояние компонента изменяется и происходит повторный рендеринг, здесь state и props обновятся в ответ на
пользовательские события(клик, ввод)
//! размонтирование - метод перед удалением

//TODO передача данных между компонентами реакт
в реакте компоненты данных однонаправленны

//TODO работа с API на примере.Fetch запрос API

API - набор данных в формате JSON c указанными конечными точками
        componentDidMount() - (жизненный цикл) вызывется сразу после монтирование, в этом методе происходят действия которые требуют наличие Dom-узлов
    Лучшее место для создания сетевых запросов
        fetch() - xmlhttprequest нового поколения, предоставляет улучшенный интерфейс для осуществления запросов к серверу, как по части возможностей
    и контролю происходящего, так и по синтаксису (построен на промиссах)
        Promise – это специальный объект, который содержит своё состояние.

//TODO Роутинг сайта, маршутизация и создание странице сайта.

reacttraining.com   https://reactrouter.com/web/guides/quick-start

npm install react-router-dom   - способ установки реакт роутер дом +
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link
} from "react-router-dom";

    Роутер- определяет набор маршрутов и выполняет составление запросов с маршрутами, когда к приложению приходит запрос
если какой то маршрут совпадает с url запроса, то этот маршрут выбирается для обработки
    Link - аналог тега <a></a>
    <Link to='/'>About</Link> {/*to - путь перехода(адресная строка)*/ }
    Switch - позволяет выбрать первый попавшийся маршрут и его использовать для обработки, без него роутер может использовать
для обработки одного запроса теоретически несколько маршрутов и если они соответствуют строке запросов то он их вернет


//TODO
 <h3>{this.state.input.toUpperCase()}</h3> //Вывод с большой буквы (toUpperCase()
 
 
 reset - Удаляет значение input(очищает)    
    handleSubmit(event){
        event.preventDefault();
        event.target.reset(); 
    }